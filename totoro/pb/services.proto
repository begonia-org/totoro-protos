syntax = "proto3";

package totoro;
import "totoro/pb/constant.proto";
import "totoro/pb/doc.proto";
import "pydantic_protobuf/pydantic.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message EmbeddingRequest{
 
    string file_key_or_url=1[json_name="file_key_or_url"];
    string lang=2;
    ChunkType chunk_type=3[json_name="chunk_type"];
    ParserConfig parser_config=5[json_name="parser_config"];
    string embedding=6;
    string model_api_key=7[json_name="model_api_key"];
    string doc_title=8[json_name="doc_title"];
    string task_id=9[json_name="task_id"];
    repeated string important_keywords=19[json_name="important_keywords"];

}


message EmbeddingResponse{
    repeated EmbededItem items=1;
}
message EmbeddingProgressRequest{
    string task_id=1[json_name="task_id"];
}
message CandidateTokens{
    string token=1;
    string doc_id=2[json_name="doc_id"];
}

message ReankingRequest{
    string  query=1;
    map<string,string> candidates=2;
    string rerank=3;
    string model_api_key=7[json_name="model_api_key"];

    double keyword_simlarity_weight=4[json_name="keyword_simlarity_weight"];
    double semantic_simlarity_weight=5[json_name="semantic_simlarity_weight"];

}

message ReankingResponse{
    map<string, Smilarity> weighted_similarity_ranks =1[json_name="weighted_similarity_ranks"];
    map<string,Smilarity>keyword_similarity_ranks=2[json_name="keyword_similarity_ranks"];
    map<string,Smilarity>semantic_similarity_ranks=3[json_name="semantic_similarity_ranks"];
}
message QueryBuildRequest{
    string query=1;
    int32 top=2;
    double simlarity_threshold=3;
    string embedding=6;
    string model_api_key=7[json_name="model_api_key"];
}
message QueryBuildResponse{
    DocSearchVector vector=1;
    }
message PreQuestionRequest{
    string question=1;

}
message PreQuestionResponse{
    TermWeightTokens term_weight_tokens=1;

    }
service  RAGCoreService{
    rpc EmbeddingDoc(EmbeddingRequest) returns (EmbeddingResponse){
        option (google.api.http) = {
            post: "/api/v1/rag/embedding"
            body: "*"
        };
    }
    rpc ReankingDoc(ReankingRequest) returns (ReankingResponse){
        option (google.api.http) = {
            post: "/api/v1/rag/reanking"
            body: "*"
        };
    }
    rpc BuildQuery(QueryBuildRequest) returns (QueryBuildResponse){
        option (google.api.http) = {
            post: "/api/v1/rag/query"
            body: "*"
        };
    }
    rpc ReadEmbeddingProgress(EmbeddingProgressRequest) returns (DocDegreeProgress){
        option (google.api.http) = {
            get: "/api/v1/rag/embedding/progess"
        };

    }
    rpc PreQuestion(PreQuestionRequest) returns (PreQuestionResponse){
        option (google.api.http) = {
            get: "/api/v1/rag/pre_question"
        };
    }
}